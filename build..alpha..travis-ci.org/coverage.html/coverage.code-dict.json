{"/home/travis/build/npmtest/node-npmtest-ttystudio/test.js":"/* istanbul instrument in package npmtest_ttystudio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttystudio/lib.npmtest_ttystudio.js":"/* istanbul instrument in package npmtest_ttystudio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ttystudio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ttystudio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ttystudio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ttystudio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ttystudio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ttystudio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ttystudio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ttystudio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ttystudio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ttystudio.__dirname + '/lib.npmtest_ttystudio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/index.js":"module.exports = require('./lib/ttystudio');\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/ttystudio.js":"/**\n * ttystudio.js - a terminal-to-gif recorder minus the headaches\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * ttystudio\n */\n\nexports = require('./writer');\nexports.buffer = require('./buffer');\nexports.compile = require('./compile');\nexports.gif = require('./gif');\nexports.optimize = require('./optimize');\nexports.options = require('./options');\nexports.play = require('./play');\nexports.png = require('./png');\nexports.record = require('./record');\nexports.writer = require('./writer');\n\n/**\n * Expose\n */\n\nmodule.exports = exports;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/writer.js":"/**\n * cell.js - SGR to GIF Writer for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs')\n  , EventEmitter = require('events').EventEmitter\n  , blessed = require('blessed')\n  , GIFWriter = require('./gif')\n  , PNGWriter = require('./png');\n\n/**\n * SGR\n */\n\nfunction SGRWriter(frames, options) {\n  var self = this;\n\n  if (!(this instanceof SGRWriter)) {\n    return new SGRWriter(frames, options);\n  }\n\n  EventEmitter.call(this);\n\n  this.options = options || {};\n  this.options.convertFrame = this.convertFrame.bind(this);\n\n  if (this.options.png) {\n    this.writer = new PNGWriter(frames, this.options);\n  } else {\n    this.writer = new GIFWriter(frames, this.options);\n  }\n\n  this.writer.on('done', function(event) {\n    self.emit('done', event);\n  });\n\n  this.ratio = this.options.ratio || {\n    width: 8,\n    height: 15\n  };\n\n  this.options.font = this.options.font\n    || __dirname + '/../fonts/ter-u14n.json';\n  this.options.fontBold = this.options.fontBold\n    || __dirname + '/../fonts/ter-u14b.json';\n\n  this.font = this.loadFont(this.options.font);\n  this.fontBold = this.loadFont(this.options.fontBold);\n}\n\nSGRWriter.prototype.__proto__ = EventEmitter.prototype;\n\nSGRWriter.prototype.write = function() {\n  return this.writer.write();\n};\n\nSGRWriter.prototype.convertFrame = function(frame) {\n  if (!frame.data) {\n    if (typeof frame === 'string' || typeof frame[0] === 'string') {\n      frame = this.parseSGR(frame);\n    }\n    if (typeof frame[0][0][1] === 'string') {\n      frame = this.parseCellmap(frame);\n    }\n  }\n  return frame;\n};\n\nSGRWriter.prototype.parseSGR = function(ANSI) {\n  var dattr = (0 << 18) | (0x1ff << 9) | (0x1ff < 0)\n    , attr = dattr\n    , cellmap\n    , i\n    , line\n    , cline\n    , j\n    , ch\n    , c;\n\n  if (typeof ANSI === 'string') {\n    ANSI = ANSI.trim().split('\\n');\n  }\n\n  cellmap = [];\n  for (i = 0; i < ANSI.length; i++) {\n    line = ANSI[i];\n    cline = [];\n    for (j = 0; j < line.length; j++) {\n      ch = line[j];\n      while (ch === '\\x1b') {\n        if (c = /^\\x1b\\[[\\d;]*m/.exec(line.substring(j))) {\n          attr = blessed.screen.prototype.attrCode(c[0], attr, dattr);\n          j += c[0].length;\n          ch = line[j];\n        } else {\n          break;\n        }\n      }\n      if (ch) {\n        cline.push([attr, ch]);\n      }\n    }\n    cellmap.push(cline);\n  }\n\n  return cellmap;\n};\n\nSGRWriter.prototype.parseCellmap = function(cellmap) {\n  var bmp = []\n    , chs = []\n    , i\n    , cline\n    , bline\n    , j\n    , cell\n    , attr\n    , ch\n    , b\n    , f\n    , bg\n    , fg\n    , tmp\n    , x\n    , y\n    , cb\n    , ci\n    , cc;\n\n  for (i = 0; i < cellmap.length; i++) {\n    cline = cellmap[i];\n    bline = [];\n\n    for (j = 0; j < cline.length; j++) {\n      cell = cline[j];\n      attr = cell[0];\n      ch = cell[1];\n\n      b = attr & 0x1ff;\n      f = (attr >> 9) & 0x1ff;\n      bg = blessed.colors.vcolors[b];\n      fg = blessed.colors.vcolors[f];\n\n      if (b === 0x1ff) bg = [0, 0, 0];\n      if (f === 0x1ff) fg = [255, 255, 255];\n\n      if (ch !== ' ' && !this.font[ch]) {\n        tmp = bg;\n        bg = fg;\n        fg = tmp;\n      }\n\n      if (ch !== ' ' && this.font[ch]) {\n        chs.push({\n          x: j * this.ratio.width,\n          y: i * this.ratio.height,\n          ch: ch,\n          r: fg[0],\n          g: fg[1],\n          b: fg[2],\n          a: 255,\n          invisible: !!((attr >> 18) & 16),\n          inverse: !!((attr >> 18) & 8),\n          blink: !!((attr >> 18) & 4),\n          underline: !!((attr >> 18) & 2),\n          bold: !!((attr >> 18) & 1)\n        });\n      }\n\n      for (x = 0; x < this.ratio.width; x++) {\n        bline.push({\n          r: bg[0],\n          g: bg[1],\n          b: bg[2],\n          a: 255,\n          ch: ch,\n          fg: { r: fg[0], g: fg[1], b: fg[2], a: 255 }\n        });\n      }\n    }\n\n    for (y = 0; y < this.ratio.height; y++) {\n      cb = [];\n      for (ci = 0; ci < bline.length; ci++) {\n        cc = bline[ci];\n        cb.push({\n          r: cc.r,\n          g: cc.g,\n          b: cc.b,\n          a: cc.a,\n          ch: cc.ch,\n          fg: { r: cc.fg.r, g: cc.fg.g, b: cc.fg.b, a: cc.fg.a }\n        });\n      }\n      bmp.push(cb);\n    }\n  }\n\n  bmp = this.addChars(bmp, chs);\n\n  if (this.options.border) {\n    bmp = this.addBorder(bmp, this.options.border);\n  }\n\n  return {\n    left: 0,\n    top: 0,\n    data: bmp\n  };\n};\n\nSGRWriter.prototype.addBorder = function(bmp, options) {\n  var options = options || this.options.border || {}\n    , width = options.width\n    , color = options.color || {}\n    , tline\n    , bline\n    , w\n    , x\n    , y;\n\n  width = width != null ? width : 1;\n  color.r = color.r != null ? color.r : 255;\n  color.g = color.g != null ? color.g : 255;\n  color.b = color.b != null ? color.b : 255;\n  color.a = color.a != null ? color.a : 255;\n\n  // top and bottom\n  for (w = 0; w < width; w++) {\n    tline = [];\n    bline = [];\n    for (x = 0; x < bmp[0].length; x++) {\n      tline.push({\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a,\n        ch: ' ',\n        fg: { r: color.r, g: color.g, b: color.b, a: color.a }\n      });\n      bline.push({\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a,\n        ch: ' ',\n        fg: { r: color.r, g: color.g, b: color.b, a: color.a }\n      });\n    }\n    bmp.unshift(tline);\n    bmp.push(bline);\n  }\n\n  // left/right\n  for (w = 0; w < width; w++) {\n    for (y = 0; y < bmp.length; y++) {\n      bmp[y].unshift({\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a,\n        ch: ' ',\n        fg: { r: color.r, g: color.g, b: color.b, a: color.a }\n      });\n      bmp[y].push({\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a,\n        ch: ' ',\n        fg: { r: color.r, g: color.g, b: color.b, a: color.a }\n      });\n    }\n  }\n\n  return bmp;\n};\n\nSGRWriter.prototype.loadFont = function(filename) {\n  var self = this\n    , data\n    , font;\n\n  data = JSON.parse(fs.readFileSync(filename, 'utf8'));\n\n  this.ratio.width = data.width;\n  this.ratio.height = data.height;\n\n  function convertLetter(ch, lines) {\n    var line, i;\n\n    while (lines.length > self.ratio.height) {\n      lines.shift();\n      lines.pop();\n    }\n\n    lines = lines.map(function(line) {\n      var chs = line.split('');\n      chs = chs.map(function(ch) {\n        return ch === ' ' ? 0 : 1;\n      });\n      while (chs.length < self.ratio.width) {\n        chs.push(0);\n      }\n      return chs;\n    });\n\n    while (lines.length < self.ratio.height) {\n      line = [];\n      for (i = 0; i < self.ratio.width; i++) {\n        line.push(0);\n      }\n      lines.push(line);\n    }\n\n    return lines;\n  }\n\n  font = Object.keys(data.glyphs).reduce(function(out, ch) {\n    var lines = data.glyphs[ch].map;\n    out[ch] = convertLetter(ch, lines);\n    return out;\n  }, {});\n\n  delete font[' '];\n\n  return font;\n};\n\nSGRWriter.prototype.convertCharToPixels = function(x, y, cell, pixel) {\n  var font = cell.bold ? this.fontBold : this.font\n    , coord;\n\n  if (!font[cell.ch]) return pixel;\n\n  coord = font[cell.ch][y][x];\n\n  if (coord === 0) return pixel;\n\n  return { r: cell.r, g: cell.g, b: cell.b, a: 255, ch: cell.ch, fg: pixel.fg };\n};\n\nSGRWriter.prototype.addChars = function(bmp, chs) {\n  var i\n    , cell\n    , x\n    , y\n    , cx\n    , cy;\n\n  for (i = 0; i < chs.length; i++) {\n    cell = chs[i];\n    x = cell.x;\n    y = cell.y;\n\n    for (cx = 0; cx < this.ratio.width; cx++) {\n      for (cy = 0; cy < this.ratio.height; cy++) {\n        bmp[y + cy][x + cx] = this.convertCharToPixels(cx, cy, cell, bmp[y + cy][x + cx]);\n      }\n    }\n  }\n\n  return bmp;\n};\n\nSGRWriter.prototype.log = function() {\n  if (!this.options.log) return;\n  return console.error.apply(console, arguments);\n};\n\n/**\n * Expose\n */\n\nexports = SGRWriter;\nexports.SGRWriter = SGRWriter;\nexports.GIFWriter = GIFWriter;\nexports.PNGWriter = GIFWriter;\nmodule.exports = exports;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/gif.js":"/**\n * gif.js - GIF Writer for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs')\n  , EventEmitter = require('events').EventEmitter\n  , ExpandingBuffer = require('./buffer')\n  , Optimizer = require('./optimize')\n  , nextTick = global.setImmediate || process.nextTick;\n\n/**\n * GIF\n */\n\nfunction GIFWriter(frames, options) {\n  var self = this;\n\n  if (!(this instanceof GIFWriter)) {\n    return new GIFWriter(frames, options);\n  }\n\n  EventEmitter.call(this);\n\n  this.frames = frames;\n  this.options = options || {};\n\n  if (this.frames.length > 1) {\n    this.options.numPlays = this.options.numPlays || 0;\n    this.options.delay = this.options.delay || 100;\n  }\n\n  this.optimizer = new Optimizer(this.options);\n\n  if (this.options.stream) {\n    this.stream = this.options.stream;\n    var event = this.stream.__proto__ === fs.WriteStream.prototype\n      ? 'close'\n      : 'finish';\n    this.stream.on(event, function() {\n      self.emit('done', event);\n    });\n  } else {\n    this.offset = 0;\n    this.output = new ExpandingBuffer(4096);\n  }\n}\n\nGIFWriter.prototype.__proto__ = EventEmitter.prototype;\n\nGIFWriter.prototype.writeByte = function(ch) {\n  this.write8(ch);\n};\n\nGIFWriter.prototype.writeBytes = function(array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++) {\n    this.write8(array[i]);\n  }\n};\n\nGIFWriter.prototype.write = function() {\n  var i = 0\n    , frame;\n\n  this.optimizer.reset();\n\n  this.log('writing head');\n  this.writeHead();\n\n  if (this.options.numPlays != null) {\n    this.log('writing netscape looping extension');\n    this.writeNetscape();\n  }\n\n  this.log('writing GCE');\n  this.writeGCE();\n\n  while (this.frames.length) {\n    this.log('writing frame %d - %d left', i, this.frames.length);\n    frame = this.frames.shift();\n    this.writeFrame(frame, i++);\n  }\n\n  this.log('writing eof');\n  this.writeEOF();\n\n  if (this.stream) return;\n  return this.output.slice(0, this.offset);\n};\n\nGIFWriter.prototype.writeText = function(text) {\n  if (this.stream) {\n    return this.stream.write(text, 'ascii');\n  }\n  this.output.write(text, this.offset, 'ascii');\n  this.offset += Buffer.byteLength(text);\n};\n\nGIFWriter.prototype.write8 = function(ch) {\n  if (this.stream) {\n    var b = new Buffer(1);\n    b.writeUInt8(ch, 0);\n    return this.stream.write(b);\n  }\n  this.output.writeUInt8(ch, this.offset);\n  this.offset += 1;\n};\n\nGIFWriter.prototype.write16 = function(ch) {\n  if (this.stream) {\n    var b = new Buffer(2);\n    b.writeUInt16LE(ch, 0);\n    return this.stream.write(b);\n  }\n  this.output.writeUInt16LE(ch, this.offset);\n  this.offset += 2;\n};\n\nGIFWriter.prototype.writeHead = function() {\n  var options = this.options\n    , flags\n    , i\n    , color\n    , frame\n    , gct;\n\n  if (!options.lct) {\n    this.log('building gct (may take a while)');\n\n    gct = this.createPalette(this.frames);\n\n    if (gct.overflow <= 256) {\n      this.log('gct is only ' + gct.overflow + ' colors: using gct');\n      gct.global = true;\n    } else {\n      this.log('gct has ' + gct.overflow + ' colors: falling back to lct');\n      gct.global = false;\n    }\n  } else {\n    gct = [];\n  }\n\n  this.writeText('GIF89a');\n\n  frame = this.frames[0];\n  if (!frame.data && this.options.convertFrame) {\n    frame = this.options.convertFrame(frame);\n  }\n\n  this.width = frame.data[0].length;\n  this.write16(this.width);\n  this.height = frame.data.length;\n  this.write16(this.height);\n  this.gct = gct.global ? gct : this.createPalette([frame]);\n  flags = (this.gct ? 0x80 : 0)\n    | (this.gct ? this.gct.size : 0);\n  this.write8(flags);\n  this.write8(options.bgIndex || 0);\n  this.write8(options.aspect || 0);\n\n  if (this.gct) {\n    for (i = 0; i < this.gct.length; i++) {\n      color = this.gct[i];\n      this.write8(color.r);\n      this.write8(color.g);\n      this.write8(color.b);\n    }\n  }\n};\n\nGIFWriter.prototype.writeNetscape = function() {\n  var options = this.options;\n  this.write8(0x21); // ext header\n  this.write8(0xff); // label - APC\n  this.write8(11); // size\n  this.writeText('NETSCAPE2.0');\n  this.write8(3); // subblock size\n  this.write8(1); // subblock id\n  this.write16(options.numPlays);\n  this.write8(0x00); // block terminator\n};\n\nGIFWriter.prototype.writeGCE = function() {\n  var options = this.options\n    , flags;\n\n  this.write8(0x21); // ext header\n  this.write8(0xf9); // label - GCE\n  this.write8(0x04); // size\n  flags = ((options.disposeMethod & 0x07) << 2)\n    | ~~options.useTransparent;\n  this.write8(flags);\n  this.write16(Math.round((options.delay | 0) / 10));\n  this.write8(options.transparentColor | 0);\n  this.write8(0x00); // terminator\n};\n\nGIFWriter.prototype.writeFrame = function(frame, i) {\n  var self = this\n    , flags\n    , j\n    , color\n    , imgBuffer\n    , numColors\n    , codeSize;\n\n  if (!frame.data && this.options.convertFrame) {\n    frame = this.options.convertFrame(frame);\n  }\n\n  frame = this.optimizer.offset(frame);\n\n  this.write8(0x2c);\n  this.write16(frame.left || 0);\n  this.write16(frame.top || 0);\n  frame.width = frame.data[0].length;\n  this.write16(frame.width);\n  frame.height = frame.data.length;\n  this.write16(frame.height);\n  if (this.gct.global) {\n    frame.lct = null;\n  } else {\n    frame.lct = i > 0 ? this.createPalette([frame]) : null;\n  }\n  flags = (frame.lct ? 0x80 : 0)\n    | (frame.ilace ? 0x40 : 0)\n    | (frame.lct ? frame.lct.size : 0);\n  this.write8(flags);\n\n  if (frame.lct) {\n    for (j = 0; j < frame.lct.length; j++) {\n      color = frame.lct[j];\n      this.write8(color.r);\n      this.write8(color.g);\n      this.write8(color.b);\n    }\n  }\n\n  imgBuffer = new Buffer(frame.data.reduce(function(out, line) {\n    return out.concat(line.map(function(pixel) {\n      return self.lookupPalette(frame.lct || self.gct, pixel);\n    }));\n  }, []));\n\n  /**\n   * From: https://github.com/deanm/omggif\n   * omggif is a JavaScript implementation of a GIF 89a encoder and decoder.\n   * https://github.com/deanm/omggif\n   *\n   * (c) Dean McNamee <dean@gmail.com>, 2013.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a\n   * copy of this software and associated documentation files (the \"Software\"),\n   * to deal in the Software without restriction, including without limitation\n   * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n   * and/or sell copies of the Software, and to permit persons to whom the\n   * Software is furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n   * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n   * DEALINGS IN THE SOFTWARE.\n   */\n  numColors = (frame.lct || this.gct).length;\n  if (numColors < 2 || numColors > 256 || (numColors & (numColors - 1))) {\n    throw new Error('Invalid code/color length, must be power of 2 and 2 .. 256: ' + numColors);\n  }\n  codeSize = 0;\n  while (numColors >>= 1) ++codeSize;\n  numColors = 1 << codeSize;\n  codeSize = codeSize < 2 ? 2 : codeSize\n\n  this.compress(frame, imgBuffer, codeSize);\n};\n\nGIFWriter.prototype.compress = function(frame, imgBuffer, codeSize) {\n  var enc = new LZWEncoder(frame.width, frame.height, imgBuffer, codeSize);\n  enc.encode(this);\n};\n\nGIFWriter.prototype.writeEOF = function() {\n  var self = this;\n\n  this.write8(0x3b);\n\n  if (this.stream && this.stream !== process.stdout) {\n    try {\n      this.stream.end();\n    } catch (e) {\n      nextTick(function() {\n        self.emit('done', 'eof');\n      });\n    }\n  } else {\n    nextTick(function() {\n      self.emit('done', 'eof');\n    });\n  }\n};\n\nGIFWriter.prototype.createPalette = function(frames) {\n  var lookup = {}\n    , overflow = 0\n    , i = 0\n    , table;\n\n  frames.forEach(function(frame, frameIndex) {\n    if (!frame.data && this.options.convertFrame) {\n      frame = this.options.convertFrame(frame);\n    }\n    if (frames.length > 1) {\n      if (frameIndex % 30 === 0) {\n        this.out('.');\n      }\n    }\n    table = frame.data.reduce(function(table, line) {\n      var colors = line.reduce(function(out, pixel) {\n        [pixel, pixel.fg].forEach(function(pixel) {\n          if (!pixel) return;\n\n          var hash = (pixel.r << 16)\n            | (pixel.g << 8)\n            | (pixel.b << 0);\n\n          if (lookup[hash] != null) {\n            return;\n          }\n\n          if (i + 1 > 256) {\n            overflow++;\n            lookup[hash] = 1;\n            return;\n          }\n\n          lookup[hash] = i;\n          i++;\n          overflow = i;\n\n          out.push({\n            r: pixel.r,\n            g: pixel.g,\n            b: pixel.b,\n            a: 255\n          });\n        });\n        return out;\n      }, []);\n      return table.concat(colors);\n    }, table || []);\n  }, this);\n\n  if (frames.length > 1) {\n    this.out('\\n');\n  }\n\n  while (table.length < 2 || (table.length & (table.length - 1))) {\n    table.push({ r: 0, g: 0, b: 0, a: 255 });\n    if (lookup[0] == null) lookup[0] = table.length - 1;\n  }\n\n  table.size = 1;\n  while (table.size < 8 && (1 << table.size) !== table.length) {\n    table.size++;\n  }\n  table.size = (table.size - 1) & 0x07;\n\n  table.lookup = lookup;\n\n  table.overflow = overflow;\n\n  return table;\n};\n\nGIFWriter.prototype.lookupPalette = function(table, pixel) {\n  return table.lookup[(pixel.r << 16) | (pixel.g << 8) | (pixel.b << 0)];\n};\n\nGIFWriter.prototype.log = function() {\n  if (!this.options.log) return;\n  return console.error.apply(console, arguments);\n};\n\nGIFWriter.prototype.out = function(text) {\n  if (!this.options.log) return;\n  return process.stderr.write(text);\n};\n\n/**\n * LZWEncoder.js\n *\n * From:\n *   https://github.com/eugeneware/gifencoder/blob/master/lib/LZWEncoder.js\n *   https://github.com/eugeneware/gifencoder/blob/master/LICENSE\n *\n * Copyright (c) 2013, Eugene Ware\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of Eugene Ware nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY EUGENE WARE ''AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL EUGENE WARE BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Authors\n * Kevin Weiner (original Java version - kweiner@fmsware.com)\n * Thibault Imbert (AS3 version - bytearray.org)\n * Johan Nordberg (JS version - code@johan-nordberg.com)\n *\n * Acknowledgements\n * GIFCOMPR.C - GIF Image compression routines\n * Lempel-Ziv compression based on 'compress'. GIF modifications by\n * David Rowley (mgardi@watdcsu.waterloo.edu)\n * GIF Image compression - modified 'compress'\n * Based on: compress.c - File compression ala IEEE Computer, June 1984.\n * By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n * Jim McKie (decvax!mcvax!jim)\n * Steve Davies (decvax!vax135!petsd!peora!srd)\n * Ken Turkowski (decvax!decwrl!turtlevax!ken)\n * James A. Woods (decvax!ihnp4!ames!jaw)\n * Joe Orost (decvax!vax135!petsd!joe)\n */\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    // Could use 255?\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\n/**\n * Expose\n */\n\nmodule.exports = GIFWriter;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/buffer.js":"/**\n * buffer.js - expanding buffer for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * ExpandingBuffer\n */\n\nfunction ExpandingBuffer() {\n  var self = this;\n  if (!(self instanceof ExpandingBuffer)) {\n    self = Object.create(ExpandingBuffer.prototype);\n  }\n  if (Buffer.isBuffer(arguments[0])) {\n    self.buffer = arguments[0];\n  } else {\n    self.buffer = Buffer.apply(null, arguments);\n  }\n  return self;\n}\n\nObject.keys(Buffer.prototype).forEach(function(method) {\n  ExpandingBuffer.prototype[method] = function() {\n    try {\n      return this.buffer[method].apply(this.buffer, arguments);\n    } catch (e) {\n      if (~e.message.indexOf('out of range')) {\n        var buf = new Buffer(this.buffer.length * 2);\n        this.buffer.copy(buf);\n        this.buffer = buf;\n        return this[method].apply(this, arguments);\n      }\n      throw e;\n    }\n  };\n});\n\n/**\n * Expose\n */\n\nmodule.exports = ExpandingBuffer;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/optimize.js":"/**\n * optimize.js - frame optimizer for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * Optimizer\n */\n\nfunction Optimizer(options) {\n  this.options = options || {};\n}\n\nOptimizer.prototype.reset = function(frame) {\n  delete this.damage;\n};\n\nOptimizer.prototype.offset = function(frame) {\n  var bmp = frame.data || frame\n    , left = null\n    , top = null\n    , right = null\n    , bottom = null\n    , x\n    , y\n    , cell\n    , hash;\n\n  if (!this.damage) {\n    this.damage = [];\n    for (y = 0; y < bmp.length; y++) {\n      bline = [];\n      for (x = 0; x < bmp[y].length; x++) {\n        bline.push(null);\n      }\n      this.damage.push(bline);\n    }\n  }\n\n  for (y = 0; y < bmp.length; y++) {\n    cline = bmp[y];\n    for (x = 0; x < cline.length; x++) {\n      cell = cline[x];\n      hash = (cell.r << 24) | (cell.g << 16) | (cell.b << 8) | (cell.a << 0);\n      if (this.damage[y][x] !== hash) {\n        if (left === null) left = x;\n        else if (x < left) left = x;\n        if (top === null) top = y;\n      }\n    }\n  }\n\n  for (y = bmp.length - 1; y >= 0; y--) {\n    cline = bmp[y];\n    for (x = cline.length - 1; x >= 0; x--) {\n      cell = cline[x];\n      hash = (cell.r << 24) | (cell.g << 16) | (cell.b << 8) | (cell.a << 0);\n      if (this.damage[y][x] !== hash) {\n        if (right === null) right = x + 1;\n        else if (x + 1 > right) right = x + 1;\n        if (bottom === null) bottom = y + 1;\n      }\n      this.damage[y][x] = hash;\n    }\n  }\n\n  if (left === null) left = 0;\n  if (right === null) right = 1;\n\n  if (top === null) top = 0;\n  if (bottom === null) bottom = 1;\n\n  if (left > right) {\n    throw new Error('optimizer failed: left > right');\n  }\n\n  if (top > bottom) {\n    throw new Error('optimizer failed: top > bottom');\n  }\n\n  bmp = bmp.slice(top, bottom);\n  for (y = 0; y < bmp.length; y++) {\n    bmp[y] = bmp[y].slice(left, right);\n  }\n\n  this.log('frame dimensions: %dx%d', bmp[0].length, bmp.length);\n\n  return {\n    left: left,\n    top: top,\n    data: bmp,\n    optimized: true\n  };\n};\n\nOptimizer.prototype.log = function() {\n  if (!this.options.log) return;\n  return console.error.apply(console, arguments);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Optimizer;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/png.js":"/**\n * png.js - PNG Writer for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs')\n  , EventEmitter = require('events').EventEmitter\n  , zlib = require('zlib')\n  , ExpandingBuffer = require('./buffer')\n  , Optimizer = require('./optimize')\n  , nextTick = global.setImmediate || process.nextTick;\n\n/**\n * PNG\n */\n\nfunction PNGWriter(frames, options) {\n  var self = this;\n\n  if (!(this instanceof PNGWriter)) {\n    return new PNGWriter(frames, options);\n  }\n\n  EventEmitter.call(this);\n\n  this.frames = frames;\n  this.options = options || {};\n\n  this.optimizer = new Optimizer(this.options);\n\n  this.cbuff = new ExpandingBuffer(256);\n  this.seq = 0;\n  this.bitDepth = 8;\n  this.coffset = -1;\n\n  if (this.options.stream) {\n    this.stream = this.options.stream;\n    var event = this.stream.__proto__ === fs.WriteStream.prototype\n      ? 'close'\n      : 'finish';\n    this.stream.on(event, function() {\n      self.emit('done', event);\n    });\n  } else {\n    this.offset = 0;\n    this.output = new ExpandingBuffer(4096);\n  }\n}\n\nPNGWriter.prototype.__proto__ = EventEmitter.prototype;\n\nPNGWriter.prototype.write = function() {\n  var frameIndex = 0\n    , frame;\n\n  this.optimizer.reset();\n\n  if (this.options.usePalette !== false) {\n    this.log('building palette (may take a while)');\n    try {\n      this.palette = this.createPalette();\n    } catch (e) {\n      this.log(e.message);\n    }\n  }\n\n  this.log('writing head');\n  this.writeHead();\n\n  this.log('writing palette');\n  this.writePalette();\n\n  this.log('writing trans palette');\n  this.writeTrans();\n\n  if (this.frames.length > 1) {\n    this.log('writing actl');\n    this.writeACTL();\n    this.log('writing idat');\n    frame = this.frames[(this.frames.length - 1) / 2 | 0];\n    this.writeIDAT(frame);\n  }\n\n  if (this.frames.length > 1) {\n    while (this.frames.length) {\n      this.log('writing frame %d - %d left', frameIndex, this.frames.length);\n      frame = this.frames.shift();\n      this.writeFrame(frame, frameIndex++);\n    }\n  } else {\n    this.log('writing idat');\n    frame = this.frames.shift();\n    this.writeIDAT(frame);\n  }\n\n  this.log('writing eof');\n  this.writeEOF();\n\n  if (this.stream) return;\n  return this.output.slice(0, this.offset);\n};\n\nPNGWriter.prototype.writeText = function(text) {\n  if (this.coffset !== -1) {\n    this.cbuff.write(text, this.coffset, 'ascii');\n    this.coffset += Buffer.byteLength(text);\n  }\n\n  if (this.stream) {\n    return this.stream.write(text, 'ascii');\n  }\n  this.output.write(text, this.offset, 'ascii');\n  this.offset += Buffer.byteLength(text);\n};\n\nPNGWriter.prototype.write8 = function(ch) {\n  if (this.coffset !== -1) {\n    this.cbuff.writeUInt8(ch, this.coffset);\n    this.coffset += 1;\n  }\n\n  if (this.stream) {\n    var b = new Buffer(1);\n    b.writeUInt8(ch, 0);\n    return this.stream.write(b);\n  }\n  this.output.writeUInt8(ch, this.offset);\n  this.offset += 1;\n};\n\nPNGWriter.prototype.write16 = function(ch) {\n  if (this.coffset !== -1) {\n    this.cbuff.writeUInt16BE(ch, this.coffset);\n    this.coffset += 2;\n  }\n\n  if (this.stream) {\n    var b = new Buffer(2);\n    b.writeUInt16BE(ch, 0);\n    return this.stream.write(b);\n  }\n  this.output.writeUInt16BE(ch, this.offset);\n  this.offset += 2;\n};\n\nPNGWriter.prototype.write32 = function(ch) {\n  if (this.coffset !== -1) {\n    this.cbuff.writeUInt32BE(ch, this.coffset);\n    this.coffset += 4;\n  }\n\n  if (this.stream) {\n    var b = new Buffer(4);\n    b.writeUInt32BE(ch, 0);\n    return this.stream.write(b);\n  }\n  this.output.writeUInt32BE(ch, this.offset);\n  this.offset += 4;\n};\n\nPNGWriter.prototype.createPalette = function() {\n  var self = this\n    , lookup = {}\n    , i = 0\n    , table;\n\n  this.frames.forEach(function(frame, frameIndex) {\n    if (!frame.data && this.options.convertFrame) {\n      frame = this.options.convertFrame(frame);\n    }\n    if (frameIndex % 30 === 0) {\n      this.out('.');\n    }\n    table = frame.data.reduce(function(table, line) {\n      var colors = line.reduce(function(out, pixel) {\n        [pixel, pixel.fg].forEach(function(pixel) {\n          if (!pixel) return;\n\n          var hash = (pixel.r << 24)\n            | (pixel.g << 16)\n            | (pixel.b << 8)\n            | (pixel.a << 0);\n\n          if (lookup[hash] != null) {\n            return;\n          }\n\n          if (i + 1 > 0xffffffff) {\n            self.bitDepth = 8;\n            throw new Error('palette building failed. switching to rgba.');\n          } else if (i + 1 > 0xffff) {\n            self.bitDepth = 32;\n          } else if (i + 1 > 0xff) {\n            self.bitDepth = 16;\n          }\n\n          lookup[hash] = i;\n          i++;\n\n          out.push({\n            r: pixel.r,\n            g: pixel.g,\n            b: pixel.b,\n            a: pixel.a\n          });\n        });\n        return out;\n      }, []);\n      return table.concat(colors);\n    }, table || []);\n  }, this);\n\n  this.out('\\n');\n\n  if (this.bitDepth === 16) {\n    Object.keys(lookup).forEach(function(hash) {\n      var i = lookup[hash];\n      lookup[hash] = [(i >> 8) & 0xff, i & 0xff];\n    });\n  } else if (this.bitDepth === 32) {\n    Object.keys(lookup).forEach(function(hash) {\n      var i = lookup[hash];\n      lookup[hash] = [(i >> 24) & 0xff, (i >> 16) & 0xff, (i >> 8) & 0xff, i & 0xff];\n    });\n  }\n\n  table.lookup = lookup;\n\n  return table;\n};\n\nPNGWriter.prototype.lookupPalette = function(pixel) {\n  var hash = (pixel.r << 24)\n    | (pixel.g << 16)\n    | (pixel.b << 8)\n    | (pixel.a << 0);\n  return this.palette.lookup[hash];\n};\n\nPNGWriter.prototype.startCRC = function() {\n  this.coffset = 0;\n};\n\nPNGWriter.prototype.endCRC = function() {\n  var crc = this.crc(this.cbuff.buffer.slice(0, this.coffset));\n  this.coffset = -1;\n  if (this.stream) {\n    var b = new Buffer(4);\n    b.writeInt32BE(crc);\n    return this.stream.write(b);\n  }\n  this.output.writeInt32BE(crc);\n  this.offset += 4;\n};\n\nPNGWriter.prototype.writeHead = function() {\n  var frame = this.frames[0];\n  if (!frame.data && this.options.convertFrame) {\n    frame = this.options.convertFrame(frame);\n    // this.frames[0] = frame;\n  }\n\n  this.write32(0x89504e47);\n  this.write32(0x0d0a1a0a);\n\n  this.write32(4 + 4 + 1 + 1 + 1 + 1 + 1); // size\n  this.startCRC();\n  this.writeText('IHDR'); // type\n  this.write32(frame.data[0].length); // width\n  this.write32(frame.data.length); // height\n  this.write8(this.bitDepth || 8); // bit depth\n  if (this.palette) {\n    this.write8(3); // color type\n  } else {\n    this.write8(6); // color type\n  }\n  this.write8(0); // compression\n  this.write8(0); // filter\n  this.write8(0); // interlace\n  this.endCRC();\n};\n\nPNGWriter.prototype.writePalette = function() {\n  var i\n    , color;\n\n  if (!this.palette) return;\n\n  this.write32(this.palette.length * 3); // size\n  this.startCRC();\n  this.writeText('PLTE'); // type\n  for (i = 0; i < this.palette.length; i++) {\n    color = this.palette[i];\n    this.write8(color.r);\n    this.write8(color.g);\n    this.write8(color.b);\n  }\n  this.endCRC();\n};\n\nPNGWriter.prototype.writeTrans = function() {\n  var i\n    , color;\n\n  if (!this.palette) return;\n\n  this.write32(this.palette.length * 1); // size\n  this.startCRC();\n  this.writeText('tRNS'); // type\n  for (i = 0; i < this.palette.length; i++) {\n    color = this.palette[i];\n    this.write8(color.a);\n  }\n  this.endCRC();\n};\n\nPNGWriter.prototype.writeACTL = function() {\n  this.write32(4 + 4); // size\n  this.startCRC();\n  this.writeText('acTL'); // type\n  this.write32(this.frames.length); // num frames\n  this.write32(this.options.numPlays || 0); // num plays\n  this.endCRC();\n};\n\nPNGWriter.prototype.writeIDAT = function(frame) {\n  var self = this\n    , data\n    , i;\n\n  if (!frame.data && this.options.convertFrame) {\n    frame = this.options.convertFrame(frame);\n  }\n\n  // if (!frame.optimized) {\n  //   frame = this.optimizer.offset(frame);\n  // }\n\n  data = this.compress(new Buffer(frame.data.reduce(function(out, line) {\n    return out.concat(0, line.reduce(function(out, pixel) {\n      if (self.palette) {\n        return out.concat(self.lookupPalette(pixel));\n      } else {\n        return out.concat([pixel.r, pixel.g, pixel.b, pixel.a]);\n      }\n    }, []));\n  }, [])));\n\n  this.write32(data.length); // size\n  this.startCRC();\n  this.writeText('IDAT'); // type\n  for (i = 0; i < data.length; i++) {\n    this.write8(data[i]);\n  }\n  this.endCRC();\n};\n\nPNGWriter.prototype.writeFrame = function(frame, frameIndex) {\n  var self = this\n    , data\n    , j;\n\n  if (!frame.data && this.options.convertFrame) {\n    frame = this.options.convertFrame(frame);\n  }\n\n  frame = this.optimizer.offset(frame);\n\n  this.write32(4 + 4 + 4 + 4 + 4 + 2 + 2 + 1 + 1); // size\n  this.startCRC();\n  this.writeText('fcTL'); // type\n  this.write32(this.seq++); // seqNumber\n  this.write32(frame.data[0].length); // width\n  this.write32(frame.data.length); // height\n  this.write32(frame.left || 0); // left\n  this.write32(frame.top || 0); // top\n  this.write16(this.options.delay || 100); // delay numerator\n  this.write16(1000); // delay denominator\n  this.write8(0); // dispose op\n  this.write8(0); // blend op\n  this.endCRC();\n\n  // if (frameIndex === 0) {\n  //   this.log('writing idat');\n  //   this.writeIDAT(frame);\n  //   return;\n  // }\n\n  data = this.compress(new Buffer(frame.data.reduce(function(out, line) {\n    return out.concat(0, line.reduce(function(out, pixel) {\n      if (self.palette) {\n        return out.concat(self.lookupPalette(pixel));\n      } else {\n        return out.concat([pixel.r, pixel.g, pixel.b, pixel.a]);\n      }\n    }, []));\n  }, [])));\n\n  this.write32(4 + data.length);\n  this.startCRC();\n  this.writeText('fdAT');\n  this.write32(this.seq++); // seqNumber\n  for (j = 0; j < data.length; j++) {\n    this.write8(data[j]);\n  }\n  this.endCRC();\n};\n\nPNGWriter.prototype.writeEOF = function(frame) {\n  var self = this;\n\n  this.write32(0); // size\n  this.startCRC();\n  this.writeText('IEND'); // type\n  this.endCRC();\n\n  if (this.stream && this.stream !== process.stdout) {\n    try {\n      this.stream.end();\n    } catch (e) {\n      nextTick(function() {\n        self.emit('done', 'eof');\n      });\n    }\n  } else {\n    nextTick(function() {\n      self.emit('done', 'eof');\n    });\n  }\n};\n\nPNGWriter.prototype.log = function() {\n  if (!this.options.log) return;\n  return console.error.apply(console, arguments);\n};\n\nPNGWriter.prototype.out = function(text) {\n  if (!this.options.log) return;\n  return process.stderr.write(text);\n};\n\n/**\n * node-crc\n * https://github.com/alexgorbatchev/node-crc\n * https://github.com/alexgorbatchev/node-crc/blob/master/LICENSE\n *\n * The MIT License (MIT)\n *\n * Copyright 2014 Alex Gorbatchev\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nPNGWriter.prototype.crc = (function() {\n  var crcTable = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n  ];\n\n  return function crc32(buf) {\n    var crc = -1;\n    for (var i = 0, len = buf.length; i < len; i++) {\n      crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n  };\n})();\n\nPNGWriter.prototype.compress = function(data) {\n  return zlib.deflateSync(data);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = PNGWriter;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/compile.js":"/**\n * compile.js - terminal compiler for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\nvar fs = require('fs')\n  , SGRWriter = require('./writer')\n  , options = require('./options');\n\n/**\n * Compile\n */\n\nfunction compile(options, callback) {\n  var input = options.files[0]\n    , output = options.o || options.output || options.files[1]\n    , stream\n    , frames\n    , writer;\n\n  if (output) {\n    if (output === '-') {\n      stream = process.stdout;\n      output = '[stdout]';\n    } else {\n      stream = fs.createWriteStream(output);\n    }\n  }\n\n  options.stream = stream;\n  options.delay = options.delay || 100;\n  options.png = options.png || /\\.png$/i.test(output);\n\n  if (Array.isArray(input)) {\n    frames = input;\n  } else if (typeof input === 'string') {\n    if (~input.indexOf('.json')) {\n      log('parsing json');\n      frames = JSON.parse(fs.readFileSync(input, 'utf8'));\n    } else {\n      log('reading file');\n      frames = [fs.readFileSync(input, 'utf8')];\n    }\n  } else {\n    return callback(new Error('No input file specified.'));\n  }\n\n  if (options.range) {\n    frames = frames.slice(options.range[0], options.range[1]);\n  }\n\n  log('initializing writer');\n  writer = new SGRWriter(frames, options);\n\n  writer.on('done', function(event) {\n    log('stream: ' + event);\n    log('wrote image to %s', output);\n    return callback();\n  });\n\n  log('writing image');\n  writer.write();\n\n  return writer;\n}\n\n/**\n * Helpers\n */\n\nfunction log() {\n  if (!options.log) return;\n  return console.error.apply(console, arguments);\n}\n\n/**\n * Expose\n */\n\nmodule.exports = compile;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/options.js":"/**\n * options.js - option parsing for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\n/**\n * Parse Arguments\n */\n\nfunction parseArg() {\n  var argv = process.argv.slice(2)\n    , options = { files: [] }\n    , arg;\n\n  function getarg() {\n    var arg = argv.shift();\n\n    if (arg.indexOf('--') === 0) {\n      // e.g. --opt\n      arg = arg.split('=');\n      if (arg.length > 1) {\n        // e.g. --opt=val\n        var val = arg.slice(1).join('=');\n        val = val.replace(/^~\\//, process.env.HOME + '/');\n        argv.unshift(val);\n      }\n      arg = arg[0];\n    } else if (arg[0] === '-') {\n      if (arg.length > 2) {\n        // e.g. -abc\n        argv = arg.substring(1).split('').map(function(ch) {\n          return '-' + ch;\n        }).concat(argv);\n        arg = argv.shift();\n      } else {\n        // e.g. -a\n      }\n    } else {\n      // e.g. foo\n    }\n\n    return arg;\n  }\n\n  while (argv.length) {\n    arg = getarg();\n    switch (arg) {\n      case 'record':\n      case '--record':\n        options.record = true;\n        break;\n      case 'screenshot':\n      case '--screenshot':\n        options.record = true;\n        options.screenshot = true;\n        break;\n      case 'compile':\n      case '--compile':\n        options.compile = true;\n        break;\n      case 'play':\n      case '--play':\n        options.play = true;\n        break;\n      case '-o':\n      case '--output':\n        options.output = argv.shift();\n        break;\n      case '--png':\n        options.png = true;\n        break;\n      case '-l':\n      case '-v':\n      case '--log':\n      case '--verbose':\n        options.verbose = true;\n        break;\n      case '-q':\n      case '--quiet':\n        options.log = false;\n        break;\n      case '-f':\n      case '--font':\n        options.font = argv.shift();\n        break;\n      case '-b':\n      case '--font-bold':\n        options.fontBold = argv.shift();\n        break;\n      case '-d':\n      case '--delay':\n        options.delay = +argv.shift();\n        break;\n      case '-i':\n      case '--interval':\n        options.interval = +argv.shift();\n        options.delay = +options.interval;\n        break;\n      case '-k':\n      case '--key':\n        options.key = argv.shift();\n        break;\n      case '--screenshot-key':\n        options.record = true;\n        options.screenshot = true;\n        options.screenshotKey = argv.shift();\n        break;\n      case '-n':\n      case '--num-plays':\n        options.numPlays = +argv.shift() || 0;\n        break;\n      case '-r':\n      case '--range':\n        options.range = argv.shift().split(/[^\\d]/).map(function(n) {\n          n = +n;\n          if (!isFinite(n)) return undefined;\n          return n;\n        });\n        break;\n      case '-x':\n      case '--ratio':\n        options.ratio = argv.shift().split(/[^\\d]/);\n        options.ratio = {\n          width: +options.ratio[0],\n          height: +options.ratio[1]\n        };\n        break;\n      case '-t':\n      case '--term':\n        options.term = argv.shift();\n        break;\n      case '--palette':\n        options.usePalette = true;\n        break;\n      case '--no-palette':\n      case '--rgba':\n      case '--lct':\n        options.usePalette = false;\n        options.lct = true;\n        break;\n      case '--border':\n        var b = argv.shift().split(/[^\\d]/).map(function(n) {\n          n = +n;\n          if (!isFinite(n)) return;\n          return n;\n        }).filter(function(n) {\n          return n != null;\n        });\n        options.border = {\n          width: b[0] != null ? +b[0] : 1,\n          color: {\n            r: b[1] != null ? +b[1] : 255,\n            g: b[2] != null ? +b[2] : 255,\n            b: b[3] != null ? +b[3] : 255,\n            a: b[4] != null ? +b[4] : 255\n          }\n        };\n        break;\n      case '--version':\n        console.log('v' + require(__dirname + '/../package.json').version);\n        process.exit(0);\n        break;\n      case '-?':\n      case '-h':\n      case '--help':\n        help();\n        break;\n      default:\n        options.files.push(arg);\n        break;\n    }\n  }\n\n  // Log by default\n  if (options.log !== false) {\n    options.log = true;\n  }\n\n  if (!options.files.length) {\n    return help();\n  }\n\n  return options;\n}\n\n/**\n * Help\n */\n\nfunction help() {\n  var cp = require('child_process')\n    , spawn = cp.spawnSync || cp.spawn;\n\n  spawn('man',\n    [__dirname + '/../man/ttystudio.1'],\n    { stdio: 'inherit' });\n\n  if (cp.spawnSync) {\n    process.exit(0);\n  } else {\n    process.once('uncaughtException', function() {});\n    throw 'stop';\n  }\n}\n\n/**\n * Expose\n */\n\nmodule.exports = parseArg();\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/play.js":"/**\n * play.js - terminal player for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\nvar fs = require('fs')\n  , blessed = require('blessed');\n\n/**\n * Play\n */\n\nfunction play(options, callback) {\n  var frames = JSON.parse(fs.readFileSync(options.files[0], 'utf8'));\n\n  var screen = blessed.screen({\n    smartCSR: true\n  });\n\n  screen.on('C-c', function() {\n    process.exit(0);\n  });\n\n  var timer = setInterval(function() {\n    if (!frames.length) {\n      clearInterval(timer);\n      screen.destroy();\n      return callback();\n    }\n    screen.lines = frames.shift();\n    screen.lines.forEach(function(line) {\n      line.dirty = true;\n    });\n    screen.render();\n  }, options.delay || 100);\n}\n\n/**\n * Expose\n */\n\nmodule.exports = play;\n","/home/travis/build/npmtest/node-npmtest-ttystudio/node_modules/ttystudio/lib/record.js":"/**\n * record.js - terminal recorder for ttystudio\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/ttystudio\n */\n\nvar EventEmitter = require('events').EventEmitter\n  , fs = require('fs')\n  , cp = require('child_process')\n  , blessed = require('blessed');\n\n/**\n * Record\n */\n\nfunction record(options, callback) {\n  var frames = []\n    , out\n    , termName = 'xterm'\n    , screen\n    , tty\n    , timeout;\n\n  try {\n    out = cp.execSync('tput -Txterm-256color longname', { encoding: 'utf8' });\n    if (~out.indexOf('256 colors')) {\n      termName = 'xterm-256color';\n    }\n  } catch (e) {\n    ;\n  }\n\n  screen = blessed.screen({\n    smartCSR: true\n  });\n\n  tty = blessed.terminal({\n    parent: screen,\n    cursorBlink: false,\n    screenKeys: false,\n    left: 0,\n    top: 0,\n    term: options.term || termName,\n    width: screen.width,\n    height: screen.height\n  });\n\n  function screenshot() {\n    var lines = []\n      , y\n      , line\n      , cx\n      , x\n      , cell\n      , attr\n      , ch;\n\n    for (y = 0; y < screen.lines.length; y++) {\n      line = [];\n      if (y === tty.term.y\n          && tty.term.cursorState\n          && (tty.term.ydisp === tty.term.ybase || tty.term.selectMode)\n          && !tty.term.cursorHidden) {\n        cx = tty.term.x;\n      } else {\n        cx = -1;\n      }\n      for (x = 0; x < screen.lines[y].length; x++) {\n        cell = screen.lines[y][x];\n        attr = cell[0];\n        ch = cell[1];\n        if (x === cx) attr = (0x1ff << 9) | 15;\n        line.push([attr, ch]);\n      }\n      lines.push(line);\n    }\n    frames.push(lines);\n  }\n\n  if (!options.screenshot) {\n    timeout = setInterval(screenshot, options.interval || 100);\n    if (timeout.unref) timeout.unref();\n  } else {\n    screen.key(options.screenshotKey || 'C-p', screenshot);\n  }\n\n  function done() {\n    if (!done.called) {\n      done.called = true;\n\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      screen.destroy();\n\n      callback(null, frames);\n    }\n  }\n\n  screen.key(options.key || 'C-q', done);\n\n  process.on('exit', done);\n}\n\n/**\n * Expose\n */\n\nmodule.exports = record;\n"}